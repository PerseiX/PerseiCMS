<?php
namespace Cms\UserBundle\Entity;

use Doctrine\ORM\Mapping as ORM;
use Symfony\Component\Security\Core\User\UserInterface;
use Symfony\Component\Validator\Constraints as Assert;

/**
 * @ORM\Entity(repositoryClass="Cms\UserBundle\Entity\UserRepository")
 */
class User implements UserInterface
{
    /**
     * @ORM\Id
     * @ORM\Column(type="integer")
     * @ORM\GeneratedValue(strategy="AUTO")
     */
    private $id;

    /**
     * @Assert\NotBlank(
     *     message = "Uzupełnij wszystkie pola."
     * )
     * @ORM\Column(type="string", length=64)
     */
    private $username;

    /**
     * @Assert\NotBlank(
     *     message = "Uzupełnij wszystkie pola."
     * )
     * @Assert\Email(
     *     message = "Podany przez ciebie email {{ value }} nie jest prawidłowy.",
     *     checkMX = true
     * )
     * @ORM\Column(type="string", length= 64)
     */
    private $email;

    /**
     * @Assert\NotBlank(
     *     message = "Uzupełnij wszystkie pola."
     * )
     * @ORM\Column(type="string", length=64)
     */
    private $password;

    /**
     * @Assert\NotBlank(
     *     message = "Uzupełnij wszystkie pola."
     * )
     * @Assert\DateTime(
     *     message="Podana przez Ciebię data urodzin nie jest prawidłowa"
     * )
     * @ORM\Column(type="date", length=128)
     */
    private $dateOfBirthday;

    /**
     * @Assert\NotBlank(
     *     message = "Uzupełnij wszystkie pola."
     * )
     * @ORM\Column(type="text")
     */
    private $about;

    /**
     * @ORM\Column(type="string", length=64)
     */
    private $salt;

    /**
     * @ORM\ManyToOne(targetEntity="Cms\UserBundle\Entity\Role")
     * @ORM\JoinColumn(name="role_id", referencedColumnName="id", onDelete="CASCADE")
     */
    private $roles;

    /**
     * @ORM\Column(type="string", length=255)
     */
    private $eraseCredentials;

    /**
     * @ORM\Column(name="is_active", type="boolean",  options={"default": 0})
     */
    private $isActive;

    /**
     * @ORM\Column(name="profile_picture_path", type="string")
     */
    private $profilePicturePath;


    /**
     * Returns the roles granted to the user.
     *
     * <code>
     * public function getRoles()
     * {
     *     return array('ROLE_USER');
     * }
     * </code>
     *
     * Alternatively, the roles might be stored on a ``roles`` property,
     * and populated in any number of different ways when the user object
     * is created.
     *
     * @return (Role|string)[] The user roles
     */
    public function getRoles()
    {
        // TODO: Implement getRoles() method.
    }

    /**
     * Returns the password used to authenticate the user.
     *
     * This should be the encoded password. On authentication, a plain-text
     * password will be salted, encoded, and then compared to this value.
     *
     * @return string The password
     */
    public function getPassword()
    {
        // TODO: Implement getPassword() method.
    }

    /**
     * Returns the salt that was originally used to encode the password.
     *
     * This can return null if the password was not encoded using a salt.
     *
     * @return string|null The salt
     */
    public function getSalt()
    {
        // TODO: Implement getSalt() method.
    }

    /**
     * Returns the username used to authenticate the user.
     *
     * @return string The username
     */
    public function getUsername()
    {
        // TODO: Implement getUsername() method.
    }

    /**
     * Removes sensitive data from the user.
     *
     * This is important if, at any given point, sensitive information like
     * the plain-text password is stored on this object.
     */
    public function eraseCredentials()
    {
        // TODO: Implement eraseCredentials() method.
    }
}
